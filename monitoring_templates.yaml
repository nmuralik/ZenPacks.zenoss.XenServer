/XenServer/Host:
  targetPythonClass: "ZenPacks.zenoss.XenServer.Host"

  datasources:
    property:
      type: XenServer XAPI
      xapi_classname: host
      xapi_ref: "${here/xapi_ref}"

      datapoints:
        memoryOverhead:
          path: memory_overhead

    rrd:
      type: XenServer RRD

      datapoints:
        memoryTotal:
          pattern: memory_total_kib
          rpn: "1024,*"

        memoryFree:
          pattern: memory_free_kib
          rpn: "1024,*"

        xapiMemoryUsage:
          pattern: xapi_memory_usage_kib
          rpn: "1024,*"

        xapiFreeMemory:
          pattern: xapi_free_memory_kib
          rpn: "1024,*"

        xapiLiveMemory:
          pattern: xapi_live_memory_kib
          rpn: "1024,*"

        xapiAllocation:
          pattern: xapi_allocation_kib
          rpn: "1024,*"

        pifAggrRX:
          pattern: pif_aggr_rx
          rpn: "8,*"

        pifAggrTX:
          pattern: pif_aggr_tx
          rpn: "8,*"

        cpuAvg:
          pattern: cpu_avg
          rpn: "100,*"

        loadAvg:
          pattern: loadavg

        srCacheSizeSum:
          pattern: _cache_size
          group_aggregation: SUM

        srCacheHitsSum:
          pattern: _cache_hits
          group_aggregation: SUM

        srCacheMissesSum:
          pattern: _cache_misses
          group_aggregation: SUM

  graphs:
    CPU Utilization:
      units: percent
      miny: 0
      maxy: 100

      graphpoints:
        Used:
          dpName: "rrd_cpuAvg"
          format: "%7.2lf%%"

    Memory Usage:
      units: bytes
      miny: 0

      graphpoints:
        Total:
          dpName: "rrd_memoryTotal"
          format: "%7.2lf%s"
          color: "000000"

        Used:
          dpName: "rrd_memoryFree"
          rpn: "Total,EXC,-"
          lineType: AREA
          format: "%7.2lf%s"
          colorindex: 0

        Overhead:
          dpName: "property_memoryOverhead"
          lineType: AREA
          stacked: true
          format: "%7.2lf%s"
          colorindex: 1

    Network Throughput:
      units: bits/sec
      miny: 0

      graphpoints:
        Receive:
          dpName: "rrd_pifAggrRX"
          format: "%7.2lf%s"

        Send:
          dpName: "rrd_pifAggrTX"
          format: "%7.2lf%s"

    Control Domain Load:
      units: processes
      miny: 0

      graphpoints:
        Load Average:
          dpName: "rrd_loadAvg"
          format: "%7.2lf%s"

    Storage Repositories Cache Size:
      units: bytes
      miny: 0

      graphpoints:
        Total Size:
          dpName: "rrd_srCacheSizeSum"
          format: "%7.2lf%s"

    Storage Repositories Cache Rates:
      units: ops/sec
      miny: 0

      graphpoints:
        Hits:
          dpName: "rrd_srCacheHitsSum"
          format: "%7.2lf%s"

        Misses:
          dpName: "rrd_srCacheMissesSum"
          format: "%7.2lf%s"

    Agent Memory:
      units: bytes
      miny: 0

      graphpoints:
        Usage:
          dpName: "rrd_xapiMemoryUsage"
          format: "%7.2lf%s"
          color: "000000"

        Allocation:
          dpName: "rrd_xapiAllocation"
          format: "%7.2lf%s"
          colorindex: 0

        Live:
          dpName: "rrd_xapiLiveMemory"
          format: "%7.2lf%s"
          colorindex: 1

        Free:
          dpName: "rrd_xapiFreeMemory"
          format: "%7.2lf%s"
          colorindex: 2


/XenServer/HostCPU:
  targetPythonClass: "ZenPacks.zenoss.XenServer.HostCPU"

  datasources:
    rrd:
      type: XenServer RRD

      datapoints:
        cpu:
          pattern: ""
          rpn: "100,*"

  graphs:
    CPU Utilization:
      units: "percent"
      miny: 0
      maxy: 100

      graphpoints:
        Used:
          dpName: "rrd_cpu"
          format: "%7.2lf%%"


/XenServer/Network:
  targetPythonClass: "ZenPacks.zenoss.XenServer.Network"


/XenServer/PBD:
  targetPythonClass: "ZenPacks.zenoss.XenServer.PBD"


/XenServer/PIF:
  targetPythonClass: "ZenPacks.zenoss.XenServer.PIF"

  datasources:
    metric:
      type: XenServer XAPI
      xapi_classname: PIF_metrics
      xapi_ref: "${here/xapi_metrics_ref}"

      datapoints:
        ioRead:
          path: io_read_kbs
          rpn: "8192,*"

        ioWrite:
          path: io_write_kbs
          rpn: "8192,*"

        speed:
          path: speed
          rpn: "1000000,*"

    rrd:
      type: XenServer RRD

      datapoints:
        rx:
          pattern: _rx
          rpn: "8192,*"

        tx:
          pattern: _tx
          rpn: "8192,*"

/XenServer/Pool:
  targetPythonClass: "ZenPacks.zenoss.XenServer.Pool"

  datasources:
    property:
      type: XenServer XAPI
      xapi_classname: pool
      xapi_ref: "${here/xapi_ref}"

      datapoints:
        haPlanExistsFor:
          path: ha_plan_exists_for

        haHostFailuresToTolerate:
          path: ha_host_failures_to_tolerate


/XenServer/SR:
  targetPythonClass: "ZenPacks.zenoss.XenServer.SR"

  datasources:
    property:
      type: XenServer XAPI
      xapi_classname: SR
      xapi_ref: "${here/xapi_ref}"

      datapoints:
        physicalSize:
          path: physical_size
          rrdmin: 0

        physicalUtilisation:
          path: physical_utilisation
          rrdmin: 0

        virtualAllocation:
          path: virtual_allocation


/XenServer/VBD:
  targetPythonClass: "ZenPacks.zenoss.XenServer.VBD"

  datasources:
    metric:
      type: XenServer XAPI
      xapi_classname: VBD_metrics
      xapi_ref: "${here/xapi_metrics_ref}"

      datapoints:
        ioRead:
          path: io_read_kbs
          rpn: "1024,*"

        ioWrite:
          path: io_write_kbs
          rpn: "1024,*"

    rrd:
      type: XenServer RRD

      datapoints:
        read:
          pattern: _read
          rpn: "1024,*"

        write:
          pattern: _write
          rpn: "1024,*"

/XenServer/VDI:
  targetPythonClass: "ZenPacks.zenoss.XenServer.VDI"

  datasources:
    property:
      type: XenServer XAPI
      xapi_classname: VDI
      xapi_ref: "${here/xapi_ref}"

      datapoints:
        physicalUtilisation:
          path: physical_utilisation
          rrdmin: 0

        virtualSize:
          path: virtual_size
          rrdmin: 0


/XenServer/VIF:
  targetPythonClass: "ZenPacks.zenoss.XenServer.VIF"

  datasources:
    metric:
      type: XenServer XAPI
      xapi_classname: VIF_metrics
      xapi_ref: "${here/xapi_metrics_ref}"

      datapoints:
        ioRead:
          path: io_read_kbs
          rpn: "8192,*"

        ioWrite:
          path: io_write_kbs
          rpn: "8192,*"

    rrd:
      type: XenServer RRD

      datapoints:
        rx:
          pattern: _rx
          rpn: "8192,*"

        tx:
          pattern: _tx
          rpn: "8192,*"


/XenServer/VM:
  targetPythonClass: "ZenPacks.zenoss.XenServer.VM"

  datasources:
    property:
      type: XenServer XAPI
      xapi_classname: VM
      xapi_ref: "${here/xapi_ref}"

      datapoints:
        memoryDynamicMax:
          path: memory_dynamic_max

        memoryDynamicMin:
          path: memory_dynamic_min

        memoryOverhead:
          path: memory_overhead

        memoryStaticMax:
          path: memory_static_max

        memoryStaticMin:
          path: memory_static_min

        memoryTarget:
          path: memory_target

    metric:
      type: XenServer XAPI
      xapi_classname: VM_metrics
      xapi_ref: "${here/xapi_metrics_ref}"

      datapoints:
        vcpusNumber:
          path: VCPUs_number
          rrdmin: 0

        memoryActual:
          path: memory_actual
          rrdmin: 0

    rrd:
      type: XenServer RRD

      datapoints:
        cpuAvg:
          pattern: cpu

        memory:
          pattern: memory

        vifRXSum:
          pattern: "vif_[^_]+_rx"
          group_aggregation: SUM
          rpn: "8192,*"

        vifTXSum:
          pattern: "vif_[^_]+_tx"
          group_aggregation: SUM
          rpn: "8192,*"

        vbdReadSum:
          pattern: "vbd_[^_]+_read"
          group_aggregation: SUM
          rpn: "1024,*"

        vbdWriteSum:
          pattern: "vbd_[^_]+_write"
          group_aggregation: SUM
          rpn: "1024,*"

        memoryInternalFree:
          pattern: memory_internal_free

        memoryTarget:
          pattern: memory_target


/XenServer/VMGuest:
  targetPythonClass: "ZenPacks.zenoss.XenServer.VM"
